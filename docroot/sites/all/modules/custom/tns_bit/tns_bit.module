<?php
/**
 * @file tns_bit.module
 */

define('BIT_APPID', 'thenewschematics_com');

/**
 * Implements hook_menu().
 */
function tns_bit_menu() {
  $items = array();

  $items['admin/tns/settings/bit'] = array(
    'title' => 'BiT Events Admin',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tns_bit_settings'),
    'access arguments' => array('administer site configuration'),
  );
  
  return $items;
}

/**
 * Form for administering Bandsintown events overrides
 */
function tns_bit_settings($form, &$form_state) {
  $events = tns_bit_tour_dates(TRUE);
  $event_overrides = variable_get('tns_bit_event_overrides', array());
  $form['tns_bit_event_overrides'] = array(
    '#tree' => TRUE,
  );
  
  foreach ($events as $event) {
    $eo = isset($event_overrides[$event->id]) ? $event_overrides[$event->id] : array();
    
    $form['tns_bit_event_overrides'][$event->id] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#title' => date('n.j.y, g:i a', strtotime($event->datetime)) . ', ' . $event->venue->name,
      '#tree' => TRUE,
    );
    
    $form['tns_bit_event_overrides'][$event->id]['disabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Hide Event'),
      '#default_value' => !empty($eo['disabled']) ? 1 : 0,
    );
    
    $form['tns_bit_event_overrides'][$event->id]['url'] = array(
      '#type' => 'textfield',
      '#title' => t('RSVP URL Override'),
      '#default_value' => !empty($eo['url']) ? $eo['url'] : '',
      '#description' => t('If left blank, the RSVP URL will be @url.', array('@url' => $event->url)),
    );
  }
  
  return system_settings_form($form);
}

/**
 * Implements hook_block_info()
 */
function tns_bit_block_info() {
  $items = array();
  
  $items['tour'] = array(
    'info' => t('TNS: Upcoming Tour Dates'),
  );
  
  return $items;
}

/**
 * Implements hook_block_view()
 */
function tns_bit_block_view($delta = '') {
  $block = array(
    'subject' => '',
    'content' => '',
  );
  
  switch ($delta) {
    case 'tour': {
      $block['content'] = array(
        '#theme' => 'table',
        '#header' => array(
          t('Date'),
          t('Time'),
          t('Location'),
          t('Venue'),
          t('Info'),
        ),
        '#rows' => array(),
        '#sticky' => FALSE,
      );
      
      $events = tns_bit_tour_dates();
      foreach ($events as $event) {
        $block['content']['#rows'][] = array(
          $event['date'],
          $event['time'],
          $event['location'],
          $event['venue'],
          l('RSVP', $event['url'], array('attributes' => array('target' => '_blank', 'class' => array('rsvp-button')))),
        );
      }
      
      break;
    }
  }
  
  return $block;
}

/**
 * Gets upcoming tour dates
 */
function tns_bit_tour_dates($editing = FALSE) {
  $output = array();
  $bit = tns_bit_obj();
  $bit->setAPI(BIT_APPID);
  $event_overrides = variable_get('tns_bit_event_overrides', array());
  
  try {
    $results = $bit->getEventsForSingleArtist('The New Schematics');
    if ($editing) return $results;
    
    // loop through the response
    foreach($results as $event) {
      $eo = isset($event_overrides[$event->id]) ? $event_overrides[$event->id] : array();
      if (!empty($eo['disabled'])) continue;
      
      list($date, $time) = explode('|', date('n.j.y|g:i a', strtotime($event->datetime)));
      
      $output[] = array(
        'date' => $date,
        'time' => $time,
        'location' => $event->venue->city . ', ' . $event->venue->region,
        'venue' => $event->venue->name,
        'url' => !empty($eo['url']) ? $eo['url'] : $event->url,
      );
    }
  }
  catch(Exception $e) {
    watchdog('tns_bit', 'From line ' . __LINE__ . ' in ' . __FILE__ . ', API error message: @msg', array('@msg' => $e->getMessage()), WATCHDOG_ERROR);
  }
  
  return $output;
}

/**
 * Returns a BIT class object
 */
function tns_bit_obj() {
  include_once('bit/BIT.php');
  return new BIT();
}